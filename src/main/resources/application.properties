# ===============================
# = DATA SOURCE
# ===============================

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"

#spring.datasource.url = jdbc:mysql://sql10.freemysqlhosting.net:3306/sql10262761?useSSL=false
#spring.datasource.username = sql10262761
#spring.datasource.password = law5VVeS61

#spring.datasource.url = jdbc:mysql://localhost:3306/carcaldb?useSSL=false
#spring.datasource.username = root
#spring.datasource.password = 14nico14

spring.datasource.url = jdbc:mysql://google/carcaldata?cloudSqlInstance=carcal-1540568900831:southamerica-east1:carcaldb&socketFactory=com.google.cloud.sql.mysql.SocketFactory&user=root&password=14nic14&useSSL=false
spring.datasource.username = root
spring.datasource.password = 14nico14

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming.implicit-strategy= org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect